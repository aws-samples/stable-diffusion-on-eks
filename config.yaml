stackName: "SdOnEKS" # Name of stack
modelBucketArn: 'arn:aws:s3:::dummy-bucket' # ARN of S3 bucket for model storage. Models file should be manual populated into the bucket.
modelsRuntime:
- name: "sdruntime1" # Name of runtime, should be unique
  namespace: "default"  # Namespace of runtime, suggest deploy different runtimes on seperate namespaces
  modelFilename: "" # Model for this runtime. Model should be stored in /models/stable-diffusion of S3 bucket. Request will be routed by model filename.
  type: "SDWebUI" # Specify type of runtime. Different type of runtime represents different API Spec.
#  chartRepository: "" # Path of Helm chart if you choose to bring your own charts. Protocol (oci:// or https:// )should be added as a prefix of repository.
#  chartVersion: "" # Version of Helm chart.
  extraValues:
    karpenter:
      nodeTemplate:
        amiFamily: Bottlerocket
        dataVolume:
          volumeSize: 80Gi
          volumeType: gp3
          deleteOnTermination: true
          iops: 4000
          throughput: 1000
#          snapshotID: # EBS Snapshot ID with format snap-<snapshotid>
      provisioner:
        instanceType:
        - "g5.xlarge" # List of allowed instance type for Karpenter provisioning.
        - "g5.2xlarge"
        capacityType: # Allowed purchase mode for instances
          onDemand: true
          spot: false
    runtime:
#      inferenceApi:
#        image:
#          repository: <account_id>.dkr.ecr.<region>.amazonaws.com/sd-on-eks/inference-api # Image Repository of stable diffusion runtime.
#          tag: latest
#      queueAgent:
#        image:
#          repository: <account_id>.dkr.ecr.<region>.amazonaws.com/sd-on-eks/queue-agent # Image Repository of queue agent.
#          tag: latest
      persistence:
        enabled: true
        existingClaim: "s3-model-storage-pvc"
      scaling:
        queueLength: 10 # Target value for queue length. One new instance will be launched when queue launch reaches the value.
        minReplicaCount: 0 # Minimum number of replicas of SD Runtime.
        maxReplicaCount: 5 # Maxinum number of replicas of SD Runtime.
        cooldownPeriod: 60 # The period (in seconds) to wait after the last message before scaling down.

dynamicModelRuntime:
  enabled: false # Enable dynamic model runtime. This runtime will accept all requests without a matching runtime. Then, the runtime will load model by request.
  namespace: "default"
  type: "SDWebUI" # Specify type of runtime. Different type of runtime represents different API Spec.
#  chartRepository: "" # Path of Helm chart if you choose to bring your own charts. Protocol (oci:// or https:// )should be added as a prefix of repository.
#  chartVersion: "" # Version of Helm chart.
  extraValues:
    karpenter:
      nodeTemplate:
        amiFamily: Bottlerocket
        dataVolume:
          volumeSize: 80Gi
          volumeType: gp3
          deleteOnTermination: true
          iops: 4000
          throughput: 1000
#          snapshotID: # EBS Snapshot ID with format snap-<snapshotid>
      provisioner:
        instanceType:
        - "g5.xlarge" # List of allowed instance type for Karpenter provisioning.
        capacityType: # Allowed purchase mode for instances
          onDemand: true
          spot: false
    runtime:
#      inferenceApi:
#        image:
#          repository: <account_id>.dkr.ecr.<region>.amazonaws.com/sd-on-eks/inference-api # Image Repository of stable diffusion runtime.
#          tag: latest
#      queueAgent:
#        image:
#          repository: <account_id>.dkr.ecr.<region>.amazonaws.com/sd-on-eks/queue-agent # Image Repository of queue agent.
#          tag: latest
      persistence:
        enabled: true
        existingClaim: "s3-model-storage-pvc"
      scaling:
        queueLength: 10 # Target value for queue length. One new instance will be launched when queue launch reaches the value.
        minReplicaCount: 0 # Minimum number of replicas of SD Runtime.
        maxReplicaCount: 5 # Maxinum number of replicas of SD Runtime.
        cooldownPeriod: 60 # The period (in seconds) to wait after the last message before scaling down.
